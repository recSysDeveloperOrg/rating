// Code generated by MockGen. DO NOT EDIT.
// Source: .\idl\gen\movie\movie_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	movie "rating/idl/gen/movie"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockMovieServiceClient is a mock of MovieServiceClient interface.
type MockMovieServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMovieServiceClientMockRecorder
}

// MockMovieServiceClientMockRecorder is the mock recorder for MockMovieServiceClient.
type MockMovieServiceClientMockRecorder struct {
	mock *MockMovieServiceClient
}

// NewMockMovieServiceClient creates a new mock instance.
func NewMockMovieServiceClient(ctrl *gomock.Controller) *MockMovieServiceClient {
	mock := &MockMovieServiceClient{ctrl: ctrl}
	mock.recorder = &MockMovieServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieServiceClient) EXPECT() *MockMovieServiceClientMockRecorder {
	return m.recorder
}

// GetMovieDetail mocks base method.
func (m *MockMovieServiceClient) GetMovieDetail(ctx context.Context, in *movie.MovieDetailReq, opts ...grpc.CallOption) (*movie.MovieDetailResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMovieDetail", varargs...)
	ret0, _ := ret[0].(*movie.MovieDetailResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieDetail indicates an expected call of GetMovieDetail.
func (mr *MockMovieServiceClientMockRecorder) GetMovieDetail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieDetail", reflect.TypeOf((*MockMovieServiceClient)(nil).GetMovieDetail), varargs...)
}

// ModifyMovieRating mocks base method.
func (m *MockMovieServiceClient) ModifyMovieRating(ctx context.Context, in *movie.ModifyMovieRatingReq, opts ...grpc.CallOption) (*movie.ModifyMovieRatingResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyMovieRating", varargs...)
	ret0, _ := ret[0].(*movie.ModifyMovieRatingResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyMovieRating indicates an expected call of ModifyMovieRating.
func (mr *MockMovieServiceClientMockRecorder) ModifyMovieRating(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyMovieRating", reflect.TypeOf((*MockMovieServiceClient)(nil).ModifyMovieRating), varargs...)
}

// RecommendFeedback mocks base method.
func (m *MockMovieServiceClient) RecommendFeedback(ctx context.Context, in *movie.FeedbackReq, opts ...grpc.CallOption) (*movie.FeedbackResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RecommendFeedback", varargs...)
	ret0, _ := ret[0].(*movie.FeedbackResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecommendFeedback indicates an expected call of RecommendFeedback.
func (mr *MockMovieServiceClientMockRecorder) RecommendFeedback(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecommendFeedback", reflect.TypeOf((*MockMovieServiceClient)(nil).RecommendFeedback), varargs...)
}

// RecommendMovies mocks base method.
func (m *MockMovieServiceClient) RecommendMovies(ctx context.Context, in *movie.RecommendReq, opts ...grpc.CallOption) (*movie.RecommendResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RecommendMovies", varargs...)
	ret0, _ := ret[0].(*movie.RecommendResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecommendMovies indicates an expected call of RecommendMovies.
func (mr *MockMovieServiceClientMockRecorder) RecommendMovies(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecommendMovies", reflect.TypeOf((*MockMovieServiceClient)(nil).RecommendMovies), varargs...)
}

// SearchMovies mocks base method.
func (m *MockMovieServiceClient) SearchMovies(ctx context.Context, in *movie.SearchReq, opts ...grpc.CallOption) (*movie.SearchResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchMovies", varargs...)
	ret0, _ := ret[0].(*movie.SearchResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMovies indicates an expected call of SearchMovies.
func (mr *MockMovieServiceClientMockRecorder) SearchMovies(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMovies", reflect.TypeOf((*MockMovieServiceClient)(nil).SearchMovies), varargs...)
}

// MockMovieServiceServer is a mock of MovieServiceServer interface.
type MockMovieServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMovieServiceServerMockRecorder
}

// MockMovieServiceServerMockRecorder is the mock recorder for MockMovieServiceServer.
type MockMovieServiceServerMockRecorder struct {
	mock *MockMovieServiceServer
}

// NewMockMovieServiceServer creates a new mock instance.
func NewMockMovieServiceServer(ctrl *gomock.Controller) *MockMovieServiceServer {
	mock := &MockMovieServiceServer{ctrl: ctrl}
	mock.recorder = &MockMovieServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieServiceServer) EXPECT() *MockMovieServiceServerMockRecorder {
	return m.recorder
}

// GetMovieDetail mocks base method.
func (m *MockMovieServiceServer) GetMovieDetail(arg0 context.Context, arg1 *movie.MovieDetailReq) (*movie.MovieDetailResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieDetail", arg0, arg1)
	ret0, _ := ret[0].(*movie.MovieDetailResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieDetail indicates an expected call of GetMovieDetail.
func (mr *MockMovieServiceServerMockRecorder) GetMovieDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieDetail", reflect.TypeOf((*MockMovieServiceServer)(nil).GetMovieDetail), arg0, arg1)
}

// ModifyMovieRating mocks base method.
func (m *MockMovieServiceServer) ModifyMovieRating(arg0 context.Context, arg1 *movie.ModifyMovieRatingReq) (*movie.ModifyMovieRatingResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyMovieRating", arg0, arg1)
	ret0, _ := ret[0].(*movie.ModifyMovieRatingResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyMovieRating indicates an expected call of ModifyMovieRating.
func (mr *MockMovieServiceServerMockRecorder) ModifyMovieRating(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyMovieRating", reflect.TypeOf((*MockMovieServiceServer)(nil).ModifyMovieRating), arg0, arg1)
}

// RecommendFeedback mocks base method.
func (m *MockMovieServiceServer) RecommendFeedback(arg0 context.Context, arg1 *movie.FeedbackReq) (*movie.FeedbackResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecommendFeedback", arg0, arg1)
	ret0, _ := ret[0].(*movie.FeedbackResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecommendFeedback indicates an expected call of RecommendFeedback.
func (mr *MockMovieServiceServerMockRecorder) RecommendFeedback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecommendFeedback", reflect.TypeOf((*MockMovieServiceServer)(nil).RecommendFeedback), arg0, arg1)
}

// RecommendMovies mocks base method.
func (m *MockMovieServiceServer) RecommendMovies(arg0 context.Context, arg1 *movie.RecommendReq) (*movie.RecommendResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecommendMovies", arg0, arg1)
	ret0, _ := ret[0].(*movie.RecommendResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecommendMovies indicates an expected call of RecommendMovies.
func (mr *MockMovieServiceServerMockRecorder) RecommendMovies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecommendMovies", reflect.TypeOf((*MockMovieServiceServer)(nil).RecommendMovies), arg0, arg1)
}

// SearchMovies mocks base method.
func (m *MockMovieServiceServer) SearchMovies(arg0 context.Context, arg1 *movie.SearchReq) (*movie.SearchResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMovies", arg0, arg1)
	ret0, _ := ret[0].(*movie.SearchResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMovies indicates an expected call of SearchMovies.
func (mr *MockMovieServiceServerMockRecorder) SearchMovies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMovies", reflect.TypeOf((*MockMovieServiceServer)(nil).SearchMovies), arg0, arg1)
}

// mustEmbedUnimplementedMovieServiceServer mocks base method.
func (m *MockMovieServiceServer) mustEmbedUnimplementedMovieServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMovieServiceServer")
}

// mustEmbedUnimplementedMovieServiceServer indicates an expected call of mustEmbedUnimplementedMovieServiceServer.
func (mr *MockMovieServiceServerMockRecorder) mustEmbedUnimplementedMovieServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMovieServiceServer", reflect.TypeOf((*MockMovieServiceServer)(nil).mustEmbedUnimplementedMovieServiceServer))
}

// MockUnsafeMovieServiceServer is a mock of UnsafeMovieServiceServer interface.
type MockUnsafeMovieServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMovieServiceServerMockRecorder
}

// MockUnsafeMovieServiceServerMockRecorder is the mock recorder for MockUnsafeMovieServiceServer.
type MockUnsafeMovieServiceServerMockRecorder struct {
	mock *MockUnsafeMovieServiceServer
}

// NewMockUnsafeMovieServiceServer creates a new mock instance.
func NewMockUnsafeMovieServiceServer(ctrl *gomock.Controller) *MockUnsafeMovieServiceServer {
	mock := &MockUnsafeMovieServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMovieServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMovieServiceServer) EXPECT() *MockUnsafeMovieServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMovieServiceServer mocks base method.
func (m *MockUnsafeMovieServiceServer) mustEmbedUnimplementedMovieServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMovieServiceServer")
}

// mustEmbedUnimplementedMovieServiceServer indicates an expected call of mustEmbedUnimplementedMovieServiceServer.
func (mr *MockUnsafeMovieServiceServerMockRecorder) mustEmbedUnimplementedMovieServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMovieServiceServer", reflect.TypeOf((*MockUnsafeMovieServiceServer)(nil).mustEmbedUnimplementedMovieServiceServer))
}
